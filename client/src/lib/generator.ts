export type SupportedLanguage = "typescript" | "python"

export type GeneratedFile = {
  filename: string
  language: SupportedLanguage
  code: string
}

export type GeneratedSdkBundle = Record<SupportedLanguage, GeneratedFile>

/**
 * Mock SDK generator. Simulates a roundtrip to a backend and returns
 * generated SDKs for multiple languages.
 */
export async function generateSdksFromSpec(spec: string): Promise<GeneratedSdkBundle> {
  // Simulate latency
  await new Promise((resolve) => setTimeout(resolve, 1200))

  const sanitizedTitle = extractTitleFromSpec(spec)
  const className = toPascalCase(sanitizedTitle || "BlacksmithClient")

  const tsCode = `// Auto-generated by Blacksmith (mock)
// Source spec title: ${sanitizedTitle || "(untitled)"}

type RequestOptions = {
  baseUrl?: string
  headers?: Record<string, string>
}

export class ${className} {
  private readonly baseUrl: string
  private readonly defaultHeaders: Record<string, string>

  constructor(options: RequestOptions = {}) {
    this.baseUrl = options.baseUrl ?? "https://api.example.com"
    this.defaultHeaders = options.headers ?? {}
  }

  async ping(): Promise<{ ok: boolean }> {
    // In a real SDK this would call your API
    return { ok: true }
  }
}
`

  const pyCode = `# Auto-generated by Blacksmith (mock)\n# Source spec title: ${sanitizedTitle || "(untitled)"}\n\nfrom dataclasses import dataclass\nfrom typing import Dict, Optional\n\n\n@dataclass\nclass RequestOptions:\n    base_url: str = "https://api.example.com"\n    headers: Optional[Dict[str, str]] = None\n\n\nclass ${className}:\n    def __init__(self, options: Optional[RequestOptions] = None):\n        options = options or RequestOptions()\n        self.base_url = options.base_url\n        self.default_headers = options.headers or {}\n\n    async def ping(self) -> Dict[str, bool]:\n        # In a real SDK this would call your API\n        return {"ok": True}\n`

  return {
    typescript: {
      filename: `${className}.ts`,
      language: "typescript",
      code: tsCode,
    },
    python: {
      filename: `${className}.py`,
      language: "python",
      code: pyCode,
    },
  }
}

function extractTitleFromSpec(spec: string): string | null {
  // Try to find a title: first markdown heading or first non-empty line
  const lines = spec.split(/\r?\n/)
  for (const line of lines) {
    const trimmed = line.trim()
    if (!trimmed) continue
    const md = /^#+\s*(.+)$/.exec(trimmed)
    if (md) return sanitize(md[1])
    return sanitize(trimmed)
  }
  return null
}

function sanitize(input: string): string {
  return input.replace(/[^a-zA-Z0-9_\-\s]/g, "").trim()
}

function toPascalCase(input: string): string {
  return input
    .split(/[^a-zA-Z0-9]+/)
    .filter(Boolean)
    .map((p) => p.charAt(0).toUpperCase() + p.slice(1))
    .join("")
}


